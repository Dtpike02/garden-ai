// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Ensure DATABASE_URL="file:./prisma/dev.db" is in .env
}

// Standard NextAuth.js User model with Stripe fields
model User {
  id                   String    @id @default(cuid())
  name                 String?
  email                String?   @unique
  emailVerified        DateTime?
  image                String?
  // Stripe fields, updated by webhook AFTER user exists & subscribes
  stripeCustomerId     String?   @unique
  stripeSubscriptionId String?   @unique
  subscriptionStatus   String?   // 'active', 'inactive', 'cancelled', etc.
  questionsAsked       Int?     @default(0) // For free tier/trial tracking

  accounts             Account[]
  sessions             Session[]

  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}

// Standard NextAuth.js Account model
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String  // 'oauth', 'email', etc.
  provider          String  // 'google', 'github', etc.
  providerAccountId String  // User's ID from the provider

  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId]) // Index for adapter lookup
}

// Standard NextAuth.js Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Standard NextAuth.js VerificationToken model
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}